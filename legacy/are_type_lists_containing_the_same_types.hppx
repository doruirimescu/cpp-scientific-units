/**
 *
 * Copyright (c) 2021 Doru Irimescu
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * @file   are_type_lists_containing_the_same_type.hpp
 * @author Doru Irimescu
 *
 */
#pragma once
//Forward declarations.
template <typename... ThisArgs>
struct TypeList;

/**
 * @brief For each element in right list, check if it is contained in left list.
 *
 * @param  left_list : Left TypeList to check against.
 * @param  right_list : Right TypeList to check from.
 * @return constexpr bool : False if any element in right list is not contained, true otherwise.
 */
template <typename... LeftArgs, typename RightArg, typename... RightArgs>
constexpr bool areTypeListsContainingSameTypes(const TypeList<LeftArgs...>& left_list,
                                               const TypeList<RightArg, RightArgs...>& right_list)
{
    const bool is_right_arg_in_left_list = left_list.template hasType<RightArg>();
    if (!is_right_arg_in_left_list)
    {
        return false;
    }
    const bool returned = areTypeListsContainingSameTypes(left_list, TypeList<RightArgs...>{});
    return returned;
}

template <typename... LeftArgs, typename RightArg>
constexpr bool areTypeListsContainingSameTypes(const TypeList<LeftArgs...>& left_list,
                                               const TypeList<RightArg>& right_list)
{
    const bool is_right_arg_in_left_list = left_list.template hasType<RightArg>();
    return is_right_arg_in_left_list;
}

template <typename... LeftArgs>
constexpr bool areTypeListsContainingSameTypes(const TypeList<LeftArgs...>& left_list,
                                               const TypeList<>& right_list)
{
    return false;
}
