/**
 *
 * Copyright (c) 2021 Doru Irimescu
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * @file   remove_type_list_from_type_list.hpp
 * @author Doru Irimescu
 *
 * @brief
 * This file defines the templates for removeTypeListFromTypeList.
 */

#pragma once
#include "remove_nth_occurrence_of_type_from_list.hpp"

template <typename... LeftArgs, typename RightFirst, typename... RightArgs>
constexpr decltype(auto) removeTypeListFromTypeList(const TypeList<LeftArgs...>& left_list,
                                                    const TypeList<RightFirst, RightArgs...>& right_list)
{
    const auto new_left = removeNthOccurenceOfTypeFromTypeList<1, RightFirst>(left_list);
    return removeTypeListFromTypeList(new_left, TypeList<RightArgs...>{});
}

template <typename... LeftArgs, typename RightFirst>
constexpr decltype(auto) removeTypeListFromTypeList(const TypeList<LeftArgs...>& left_list,
                                                    const TypeList<RightFirst>& right_list)
{
    return removeNthOccurenceOfTypeFromTypeList<1, RightFirst>(left_list);
}

template <typename... T>
constexpr decltype(auto) removeTypeListFromTypeList(const TypeList<T...>& left_list, const TypeList<>& right_list)
{
    return left_list;
}

template <typename T>
constexpr decltype(auto) removeTypeListFromTypeList(const TypeList<>& left_list, const TypeList<T>& right_list)
{
    return left_list;
}

constexpr decltype(auto) removeTypeListFromTypeList(const TypeList<>& left_list, const TypeList<>& right_list)
{
    return left_list;
}
